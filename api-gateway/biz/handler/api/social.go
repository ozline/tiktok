// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	social "github.com/ozline/tiktok/api-gateway/biz/model/message/social"
	"github.com/ozline/tiktok/api-gateway/biz/model/model"
	"github.com/ozline/tiktok/api-gateway/biz/rpc"
	"github.com/ozline/tiktok/kitex_gen/tiktok/chat"
	"github.com/ozline/tiktok/kitex_gen/tiktok/follow"
	"github.com/ozline/tiktok/pkg/constants"
	"github.com/ozline/tiktok/pkg/errno"
)

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	err = rpc.RelationAction(ctx, &follow.RelationActionReq{
		UserId:     currentUserID,
		ToUserId:   req.ToUserId,
		ActionType: int32(req.ActionType),
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &social.RelationActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// RelationFollowList .
// @router /douyin/relation/follow/list [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res, err := rpc.GetFollowList(ctx, &follow.UserListReq{
		UserId:   currentUserID,
		PageNum:  constants.PageNum,
		PageSize: constants.PageSize,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &social.RelationFollowListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		UserList:   res,
	})
}

// RelationFollowerList .
// @router /douyin/relation/follower/list [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res, err := rpc.GetFollowerList(ctx, &follow.UserListReq{
		UserId:   currentUserID,
		PageNum:  constants.PageNum,
		PageSize: constants.PageSize,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &social.RelationFollowerListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		UserList:   res,
	})
}

// RleationFriendList .
// @router /douyin/relation/friend/list [GET]
func RleationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res, err := rpc.GetFriendList(ctx, &follow.UserListReq{
		UserId:   currentUserID,
		PageNum:  constants.PageNum,
		PageSize: constants.PageSize,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &social.RelationFriendListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		UserList:   res,
	})
}

// MessageSend .
// @router /douyin/message/action [POST]
func MessageSend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.MessageSendRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	err = rpc.SendChatMessage(ctx, &chat.SendMessageRequest{
		FromUser: currentUserID,
		ToUser:   req.ToUserId,
		Content:  req.Content,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &social.MessageSendResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// MessageChatMsg .
// @router /douyin/message/chat [GET]
func MessageChatMsg(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.MessageChatMsgRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	resp, err := rpc.GetChatMessage(ctx, &chat.ReceiveMessageRequest{
		ToUser:   req.ToUserId,
		FromUser: currentUserID,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	list := make([]*model.Message, 0)

	for _, v := range resp {
		list = append(list, &model.Message{
			Id:         v.Id,
			Content:    v.Content,
			CreateDate: v.CreateTime,
		})
	}

	SendCommonResponse(c, &social.MessageChatMsgResponse{
		StatusCode:  errno.SuccessCode,
		StatusMsg:   errno.SuccessMsg,
		MessageList: list,
	})
}
