// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	basic "github.com/ozline/tiktok/api-gateway/biz/model/message/basic"
	"github.com/ozline/tiktok/api-gateway/biz/rpc"
	"github.com/ozline/tiktok/pkg/errno"
	"github.com/ozline/tiktok/services/user/kitex_gen/tiktok/user"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	userId, token, err := rpc.UserRegister(context.Background(), &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &basic.UserRegisterResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		Token:      token,
		UserId:     userId,
	})
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	userId, token, err := rpc.UserLogin(context.Background(), &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		SendErrorResponse(c, err)
	}

	SendCommonResponse(c, &basic.UserLoginResponse{
		StatusCode: errno.SuccessCode,
		StatusMag:  errno.SuccessMsg,
		UserId:     userId,
		Token:      token,
	})
}

// UserGetInfo .
// @router /douyin/user [GET]
func UserGetInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	res, err := rpc.UserGetInfo(context.Background(), &user.UserRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})

	if err != nil {
		SendErrorResponse(c, err)
	}

	//TODO: get follow relationship

	res.IsFollow = false // 这部分需要再rpc一下relation服务

	SendCommonResponse(c, &basic.UserResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		User:       res,
	})
}

// VideoGetFeeds .
// @router /douyin/feed [GET]
func VideoGetFeeds(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	resp := new(basic.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// VideoPublishAction .
// @router /douyin/publish/action [POST]
func VideoPublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	resp := new(basic.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// VideoPublishList .
// @router /douyin/publish/list [GET]
func VideoPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	resp := new(basic.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
