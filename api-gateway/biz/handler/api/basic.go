// Code generated by hertz generator.

package api

import (
	"context"
	"io"
	"mime/multipart"

	"github.com/cloudwego/hertz/pkg/app"
	basic "github.com/ozline/tiktok/api-gateway/biz/model/message/basic"
	"github.com/ozline/tiktok/api-gateway/biz/model/model"
	"github.com/ozline/tiktok/api-gateway/biz/rpc"
	"github.com/ozline/tiktok/kitex_gen/tiktok/comment"
	"github.com/ozline/tiktok/kitex_gen/tiktok/follow"
	"github.com/ozline/tiktok/kitex_gen/tiktok/user"
	"github.com/ozline/tiktok/kitex_gen/tiktok/video"
	"github.com/ozline/tiktok/pkg/constants"
	"github.com/ozline/tiktok/pkg/errno"
)

type VideoFile struct {
	Data  *multipart.FileHeader `form:"data" binding:"required"`
	Token string                `form:"token" binding:"required"`
	Title string                `form:"title" binding:"required"`
}

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	userId, token, err := rpc.UserRegister(context.Background(), &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &basic.UserRegisterResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		Token:      token,
		UserId:     userId,
	})
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	userId, token, err := rpc.UserLogin(context.Background(), &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &basic.UserLoginResponse{
		StatusCode: errno.SuccessCode,
		StatusMag:  errno.SuccessMsg,
		UserId:     userId,
		Token:      token,
	})
}

// UserGetInfo .
// @router /douyin/user [GET]
func UserGetInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	res, err := rpc.UserGetInfo(context.Background(), &user.UserRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	relation, err := rpc.RelationQuery(context.Background(), &follow.RelationQueryReq{
		UserId:   currentUserID,
		ToUserId: req.UserId,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res.IsFollow = relation != 2 // is_follow表示该用户是否已被现用户关注

	SendCommonResponse(c, &basic.UserResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		User:       res,
	})
}

// VideoGetFeeds .
// @router /douyin/feed [GET]
func VideoGetFeeds(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	// Phase Token
	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	// Generate VideoID List
	res, err := rpc.GetFeeds(ctx, &video.FeedRequest{
		LatestTime: req.LatestTime,
		PageNum:    constants.PageNum,
		PageSize:   constants.PageSize,
	})

	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	// Generate VideoInfo List
	list := make([]*model.Video, 0)

	for _, v := range res {

		// Get Author Info
		author, err := rpc.UserGetInfo(ctx, &user.UserRequest{
			UserId: v.UserId,
			Token:  req.Token,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		// Get CommentCount, FavoriteCount, IsFavorite
		res, err := rpc.GetVideoCountInfo(ctx, &comment.GetVideoInfoReq{
			Uid:     currentUserID,
			VideoId: v.Id,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		list = append(list, &model.Video{
			Id:            v.Id,
			PlayUrl:       v.PlayUrl,
			CoverUrl:      v.CoverUrl,
			Title:         v.Title,
			Author:        author,
			CommentCount:  res.CommentCount,
			FavoriteCount: res.FavoriteCount,
			IsFavorite:    res.IsFavorite,
		})
	}

	SendCommonResponse(c, &basic.FeedResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		VideoList:  list,
	})
}

// VideoPublishAction .
// @router /douyin/publish/action [POST]
func VideoPublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req VideoFile
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	file, err := req.Data.Open()

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	defer file.Close()

	byteContext, err := io.ReadAll(file)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	err = rpc.VideoUpload(ctx, &video.PublishActionResquest{
		Data:   byteContext,
		Userid: currentUserID,
		Title:  req.Title,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &basic.PublishActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// VideoPublishList .
// @router /douyin/publish/list [GET]
func VideoPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	// Phase Token
	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	// Get VideoID List
	res, err := rpc.VideoGetList(ctx, &video.PublishListRequest{
		Userid:   currentUserID,
		PageNum:  constants.PageNum,
		PageSize: constants.PageSize,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	// Generate VideoInfo list
	list := make([]*model.Video, 0)

	for _, v := range res {

		// Get Author Info
		author, err := rpc.UserGetInfo(ctx, &user.UserRequest{
			UserId: v.UserId,
			Token:  req.Token,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		// Get CommentCount, FavoriteCount, IsFavorite
		res, err := rpc.GetVideoCountInfo(ctx, &comment.GetVideoInfoReq{
			Uid:     currentUserID,
			VideoId: v.Id,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		list = append(list, &model.Video{
			Id:            v.Id,
			PlayUrl:       v.PlayUrl,
			CoverUrl:      v.CoverUrl,
			Title:         v.Title,
			Author:        author,
			CommentCount:  res.CommentCount,
			FavoriteCount: res.FavoriteCount,
			IsFavorite:    res.IsFavorite,
		})
	}

	SendCommonResponse(c, &basic.PublishListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		VideoList:  list,
	})
}
