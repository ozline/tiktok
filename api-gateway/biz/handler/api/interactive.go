// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	interactive "github.com/ozline/tiktok/api-gateway/biz/model/message/interactive"
	"github.com/ozline/tiktok/api-gateway/biz/model/model"
	"github.com/ozline/tiktok/api-gateway/biz/rpc"
	"github.com/ozline/tiktok/kitex_gen/tiktok/comment"
	"github.com/ozline/tiktok/kitex_gen/tiktok/user"
	"github.com/ozline/tiktok/kitex_gen/tiktok/video"
	"github.com/ozline/tiktok/pkg/constants"
	"github.com/ozline/tiktok/pkg/errno"
)

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interactive.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	var islike bool
	if req.ActionType == 1 {
		islike = true
	} else {
		islike = false
	}

	err = rpc.FavoriteAction(ctx, &comment.FavoriteReq{
		Uid:     currentUserID,
		IsLike:  islike,
		VideoId: req.VideoId,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &interactive.FavoriteActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interactive.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res, err := rpc.GetFavoriteList(ctx, &comment.FavoriteListReq{
		Uid:        currentUserID,
		PageSize:   constants.PageSize,
		PageNumber: constants.PageNum,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	list := make([]*model.Video, 0)

	for _, v := range res {

		info, err := rpc.GetVideoInfo(ctx, &video.GetInfoRequest{
			VideoId: v,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		author, err := rpc.UserGetInfo(ctx, &user.UserRequest{
			UserId: info.UserId,
			Token:  req.Token,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		countinfo, err := rpc.GetVideoCountInfo(ctx, &comment.GetVideoInfoReq{
			Uid:     currentUserID,
			VideoId: v,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		list = append(list, &model.Video{
			Id:            v,
			Author:        author,
			Title:         info.Title,
			PlayUrl:       info.PlayUrl,
			CoverUrl:      info.CoverUrl,
			FavoriteCount: countinfo.FavoriteCount,
			CommentCount:  countinfo.CommentCount,
			IsFavorite:    countinfo.IsFavorite,
		})
	}

	SendCommonResponse(c, &interactive.FavoriteListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		VideoList:  list,
	})
}

// CommentAction .
// @router /douyin/comment/action [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interactive.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res, err := rpc.PostComment(ctx, &comment.PostReq{
		Uid:     currentUserID,
		Vid:     req.VideoId,
		Content: req.CommentText,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	user, err := rpc.UserGetInfo(ctx, &user.UserRequest{
		UserId: res.Uid,
		Token:  req.Token,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	SendCommonResponse(c, &interactive.CommentActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		Comment: &model.Comment{
			Id:         res.Id,
			User:       user,
			Content:    res.Content,
			CreateDate: res.Ctime,
		},
	})
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interactive.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		SendErrorResponse(c, errno.ParamError.WithMessage(err.Error()))
		return
	}

	currentUserID, err := PhaseToken(req.Token)

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	res, err := rpc.GetCommentList(ctx, &comment.ListReq{
		Uid:        currentUserID,
		Vid:        req.VideoId,
		Type:       comment.ListType_comment,
		PageNumber: constants.PageNum,
		PageSize:   constants.PageSize,
	})

	if err != nil {
		SendErrorResponse(c, err)
		return
	}

	list := make([]*model.Comment, 0)

	//TODO: 性能优化

	for _, v := range res {
		user, err := rpc.UserGetInfo(ctx, &user.UserRequest{
			UserId: v.Uid,
			Token:  req.Token,
		})

		if err != nil {
			SendErrorResponse(c, err)
			return
		}

		list = append(list, &model.Comment{
			Id:         v.Id,
			User:       user,
			Content:    v.Content,
			CreateDate: v.Ctime,
		})
	}

	SendCommonResponse(c, &interactive.CommentListResponse{
		StatusCode:  errno.SuccessCode,
		StatusMsg:   errno.SuccessMsg,
		CommentList: list,
	})
}
