// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tiktokuserservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "github.com/ozline/tiktok/kitex_gen/tiktok/user"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return tiktokUserServiceServiceInfo
}

var tiktokUserServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "tiktokUserService"
	handlerType := (*user.TiktokUserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":      kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"Register":   kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"Info":       kitex.NewMethodInfo(infoHandler, newInfoArgs, newInfoResult, false),
		"GetToken":   kitex.NewMethodInfo(getTokenHandler, newGetTokenArgs, newGetTokenResult, false),
		"CheckToken": kitex.NewMethodInfo(checkTokenHandler, newCheckTokenArgs, newCheckTokenResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.TiktokUserService).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(user.TiktokUserService).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *user.UserLoginRequest
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(user.UserLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *user.UserLoginRequest

func (p *LoginArgs) GetReq() *user.UserLoginRequest {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

type LoginResult struct {
	Success *user.UserLoginResponse
}

var LoginResult_Success_DEFAULT *user.UserLoginResponse

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(user.UserLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *user.UserLoginResponse {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserLoginResponse)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserRegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.TiktokUserService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(user.TiktokUserService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *user.UserRegisterRequest
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserRegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(user.UserRegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *user.UserRegisterRequest

func (p *RegisterArgs) GetReq() *user.UserRegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterResult struct {
	Success *user.UserRegisterResponse
}

var RegisterResult_Success_DEFAULT *user.UserRegisterResponse

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserRegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(user.UserRegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *user.UserRegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserRegisterResponse)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.TiktokUserService).Info(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *InfoArgs:
		success, err := handler.(user.TiktokUserService).Info(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*InfoResult)
		realResult.Success = success
	}
	return nil
}
func newInfoArgs() interface{} {
	return &InfoArgs{}
}

func newInfoResult() interface{} {
	return &InfoResult{}
}

type InfoArgs struct {
	Req *user.UserRequest
}

func (p *InfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *InfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *InfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *InfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in InfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *InfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var InfoArgs_Req_DEFAULT *user.UserRequest

func (p *InfoArgs) GetReq() *user.UserRequest {
	if !p.IsSetReq() {
		return InfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *InfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type InfoResult struct {
	Success *user.UserResponse
}

var InfoResult_Success_DEFAULT *user.UserResponse

func (p *InfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *InfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *InfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *InfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in InfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *InfoResult) Unmarshal(in []byte) error {
	msg := new(user.UserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *InfoResult) GetSuccess() *user.UserResponse {
	if !p.IsSetSuccess() {
		return InfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *InfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserResponse)
}

func (p *InfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.TiktokUserService).GetToken(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTokenArgs:
		success, err := handler.(user.TiktokUserService).GetToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTokenResult)
		realResult.Success = success
	}
	return nil
}
func newGetTokenArgs() interface{} {
	return &GetTokenArgs{}
}

func newGetTokenResult() interface{} {
	return &GetTokenResult{}
}

type GetTokenArgs struct {
	Req *user.GetTokenRequest
}

func (p *GetTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetTokenArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetTokenArgs) Unmarshal(in []byte) error {
	msg := new(user.GetTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTokenArgs_Req_DEFAULT *user.GetTokenRequest

func (p *GetTokenArgs) GetReq() *user.GetTokenRequest {
	if !p.IsSetReq() {
		return GetTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetTokenResult struct {
	Success *user.GetTokenResponse
}

var GetTokenResult_Success_DEFAULT *user.GetTokenResponse

func (p *GetTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetTokenResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetTokenResult) Unmarshal(in []byte) error {
	msg := new(user.GetTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTokenResult) GetSuccess() *user.GetTokenResponse {
	if !p.IsSetSuccess() {
		return GetTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetTokenResponse)
}

func (p *GetTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CheckTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.TiktokUserService).CheckToken(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckTokenArgs:
		success, err := handler.(user.TiktokUserService).CheckToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckTokenResult)
		realResult.Success = success
	}
	return nil
}
func newCheckTokenArgs() interface{} {
	return &CheckTokenArgs{}
}

func newCheckTokenResult() interface{} {
	return &CheckTokenResult{}
}

type CheckTokenArgs struct {
	Req *user.CheckTokenRequest
}

func (p *CheckTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CheckTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckTokenArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckTokenArgs) Unmarshal(in []byte) error {
	msg := new(user.CheckTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckTokenArgs_Req_DEFAULT *user.CheckTokenRequest

func (p *CheckTokenArgs) GetReq() *user.CheckTokenRequest {
	if !p.IsSetReq() {
		return CheckTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckTokenResult struct {
	Success *user.CheckTokenResponse
}

var CheckTokenResult_Success_DEFAULT *user.CheckTokenResponse

func (p *CheckTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.CheckTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckTokenResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckTokenResult) Unmarshal(in []byte) error {
	msg := new(user.CheckTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckTokenResult) GetSuccess() *user.CheckTokenResponse {
	if !p.IsSetSuccess() {
		return CheckTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CheckTokenResponse)
}

func (p *CheckTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, Req *user.UserLoginRequest) (r *user.UserLoginResponse, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, Req *user.UserRegisterRequest) (r *user.UserRegisterResponse, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, Req *user.UserRequest) (r *user.UserResponse, err error) {
	var _args InfoArgs
	_args.Req = Req
	var _result InfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToken(ctx context.Context, Req *user.GetTokenRequest) (r *user.GetTokenResponse, err error) {
	var _args GetTokenArgs
	_args.Req = Req
	var _result GetTokenResult
	if err = p.c.Call(ctx, "GetToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckToken(ctx context.Context, Req *user.CheckTokenRequest) (r *user.CheckTokenResponse, err error) {
	var _args CheckTokenArgs
	_args.Req = Req
	var _result CheckTokenResult
	if err = p.c.Call(ctx, "CheckToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
