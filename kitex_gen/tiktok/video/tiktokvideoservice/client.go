// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tiktokvideoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	video "github.com/ozline/tiktok/kitex_gen/tiktok/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PutVideo(ctx context.Context, Req *video.PutVideoRequest, callOptions ...callopt.Option) (r *video.PutVideoResponse, err error)
	DeleteVideo(ctx context.Context, Req *video.DeleteVideoRequest, callOptions ...callopt.Option) (r *video.DeleteVideoResponse, err error)
	GetOneVideoInfo(ctx context.Context, Req *video.GetOneVideoInfoRequest, callOptions ...callopt.Option) (r *video.GetOneVideoInfoResponse, err error)
	DownloadOneVideo(ctx context.Context, Req *video.DownloadOneVideoRequest, callOptions ...callopt.Option) (r *video.DownloadOneVideoResponse, err error)
	DownloadMultiVideo(ctx context.Context, Req *video.DownloadMultiVideoRequest, callOptions ...callopt.Option) (r *video.DownloadMultiVideoResponse, err error)
	DownloadMaxVideo(ctx context.Context, Req *video.DownloadMaxVideoRequest, callOptions ...callopt.Option) (r *video.DownloadMaxVideoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTiktokVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTiktokVideoServiceClient struct {
	*kClient
}

func (p *kTiktokVideoServiceClient) PutVideo(ctx context.Context, Req *video.PutVideoRequest, callOptions ...callopt.Option) (r *video.PutVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PutVideo(ctx, Req)
}

func (p *kTiktokVideoServiceClient) DeleteVideo(ctx context.Context, Req *video.DeleteVideoRequest, callOptions ...callopt.Option) (r *video.DeleteVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteVideo(ctx, Req)
}

func (p *kTiktokVideoServiceClient) GetOneVideoInfo(ctx context.Context, Req *video.GetOneVideoInfoRequest, callOptions ...callopt.Option) (r *video.GetOneVideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOneVideoInfo(ctx, Req)
}

func (p *kTiktokVideoServiceClient) DownloadOneVideo(ctx context.Context, Req *video.DownloadOneVideoRequest, callOptions ...callopt.Option) (r *video.DownloadOneVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DownloadOneVideo(ctx, Req)
}

func (p *kTiktokVideoServiceClient) DownloadMultiVideo(ctx context.Context, Req *video.DownloadMultiVideoRequest, callOptions ...callopt.Option) (r *video.DownloadMultiVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DownloadMultiVideo(ctx, Req)
}

func (p *kTiktokVideoServiceClient) DownloadMaxVideo(ctx context.Context, Req *video.DownloadMaxVideoRequest, callOptions ...callopt.Option) (r *video.DownloadMaxVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DownloadMaxVideo(ctx, Req)
}
