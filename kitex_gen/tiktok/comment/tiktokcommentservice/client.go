// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tiktokcommentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	comment "github.com/ozline/tiktok/kitex_gen/tiktok/comment"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	List(ctx context.Context, Req *comment.ListReq, callOptions ...callopt.Option) (r *comment.ListResp, err error)
	Post(ctx context.Context, Req *comment.PostReq, callOptions ...callopt.Option) (r *comment.PostResp, err error)
	SetLike(ctx context.Context, Req *comment.LikeReq, callOptions ...callopt.Option) (r *comment.LikeResp, err error)
	GetLike(ctx context.Context, Req *comment.LikeReq, callOptions ...callopt.Option) (r *comment.LikeResp, err error)
	SetFavorite(ctx context.Context, Req *comment.FavoriteReq, callOptions ...callopt.Option) (r *comment.FavoriteResp, err error)
	FavoriteList(ctx context.Context, Req *comment.FavoriteListReq, callOptions ...callopt.Option) (r *comment.FavoriteListResp, err error)
	GetVideoInfo(ctx context.Context, Req *comment.GetVideoInfoReq, callOptions ...callopt.Option) (r *comment.GetVideoInfoResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTiktokCommentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTiktokCommentServiceClient struct {
	*kClient
}

func (p *kTiktokCommentServiceClient) List(ctx context.Context, Req *comment.ListReq, callOptions ...callopt.Option) (r *comment.ListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.List(ctx, Req)
}

func (p *kTiktokCommentServiceClient) Post(ctx context.Context, Req *comment.PostReq, callOptions ...callopt.Option) (r *comment.PostResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Post(ctx, Req)
}

func (p *kTiktokCommentServiceClient) SetLike(ctx context.Context, Req *comment.LikeReq, callOptions ...callopt.Option) (r *comment.LikeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetLike(ctx, Req)
}

func (p *kTiktokCommentServiceClient) GetLike(ctx context.Context, Req *comment.LikeReq, callOptions ...callopt.Option) (r *comment.LikeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLike(ctx, Req)
}

func (p *kTiktokCommentServiceClient) SetFavorite(ctx context.Context, Req *comment.FavoriteReq, callOptions ...callopt.Option) (r *comment.FavoriteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetFavorite(ctx, Req)
}

func (p *kTiktokCommentServiceClient) FavoriteList(ctx context.Context, Req *comment.FavoriteListReq, callOptions ...callopt.Option) (r *comment.FavoriteListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteList(ctx, Req)
}

func (p *kTiktokCommentServiceClient) GetVideoInfo(ctx context.Context, Req *comment.GetVideoInfoReq, callOptions ...callopt.Option) (r *comment.GetVideoInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoInfo(ctx, Req)
}
