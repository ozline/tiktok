// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package comment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Comment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Comment[number], err)
}

func (x *Comment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Vid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Ctime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.LikeCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsUploderLike, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListReq[number], err)
}

func (x *ListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Vid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = ListType(v)
	return offset, nil
}

func (x *ListReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.PageNumber, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListResp[number], err)
}

func (x *ListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *ListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comments = append(x.Comments, &v)
	return offset, nil
}

func (x *PostReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostReq[number], err)
}

func (x *PostReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Vid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PostResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostResp[number], err)
}

func (x *PostResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *PostResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Comment = &v
	return offset, nil
}

func (x *LikeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeReq[number], err)
}

func (x *LikeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsLike, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *LikeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CommentId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeResp[number], err)
}

func (x *LikeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *LikeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsLike, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FavoriteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FavoriteReq[number], err)
}

func (x *FavoriteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FavoriteReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsLike, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FavoriteReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FavoriteResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FavoriteResp[number], err)
}

func (x *FavoriteResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *FavoriteListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FavoriteListReq[number], err)
}

func (x *FavoriteListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FavoriteListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FavoriteListReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PageNumber, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FavoriteListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FavoriteListResp[number], err)
}

func (x *FavoriteListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *FavoriteListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *FavoriteListResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Videos = append(x.Videos, v)
			return offset, err
		})
	return offset, err
}

func (x *GetVideoInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoInfoReq[number], err)
}

func (x *GetVideoInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoInfoResp[number], err)
}

func (x *GetVideoInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *GetVideoInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsFavorite, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetVideoInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoInfoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FavoriteCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCountReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCountReq[number], err)
}

func (x *GetCountReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCountReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Vid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseInfo[number], err)
}

func (x *BaseInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BaseInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Comment) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Id)
	return offset
}

func (x *Comment) fastWriteField2(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Uid)
	return offset
}

func (x *Comment) fastWriteField3(buf []byte) (offset int) {
	if x.Vid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.Vid)
	return offset
}

func (x *Comment) fastWriteField4(buf []byte) (offset int) {
	if x.Ctime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.Ctime)
	return offset
}

func (x *Comment) fastWriteField5(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.Content)
	return offset
}

func (x *Comment) fastWriteField6(buf []byte) (offset int) {
	if x.LikeCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.LikeCount)
	return offset
}

func (x *Comment) fastWriteField7(buf []byte) (offset int) {
	if !x.IsUploderLike {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.IsUploderLike)
	return offset
}

func (x *ListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *ListReq) fastWriteField2(buf []byte) (offset int) {
	if x.Vid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Vid)
	return offset
}

func (x *ListReq) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.Type))
	return offset
}

func (x *ListReq) fastWriteField4(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.PageSize)
	return offset
}

func (x *ListReq) fastWriteField5(buf []byte) (offset int) {
	if x.PageNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.PageNumber)
	return offset
}

func (x *ListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Info)
	return offset
}

func (x *ListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Count)
	return offset
}

func (x *ListResp) fastWriteField3(buf []byte) (offset int) {
	if x.Comments == nil {
		return offset
	}
	for i := range x.Comments {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.Comments[i])
	}
	return offset
}

func (x *PostReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PostReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *PostReq) fastWriteField2(buf []byte) (offset int) {
	if x.Vid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Vid)
	return offset
}

func (x *PostReq) fastWriteField3(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.Content)
	return offset
}

func (x *PostResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PostResp) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Info)
	return offset
}

func (x *PostResp) fastWriteField2(buf []byte) (offset int) {
	if x.Comment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.Comment)
	return offset
}

func (x *LikeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *LikeReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *LikeReq) fastWriteField2(buf []byte) (offset int) {
	if !x.IsLike {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.IsLike)
	return offset
}

func (x *LikeReq) fastWriteField3(buf []byte) (offset int) {
	if x.CommentId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.CommentId)
	return offset
}

func (x *LikeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LikeResp) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Info)
	return offset
}

func (x *LikeResp) fastWriteField2(buf []byte) (offset int) {
	if !x.IsLike {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.IsLike)
	return offset
}

func (x *FavoriteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *FavoriteReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *FavoriteReq) fastWriteField2(buf []byte) (offset int) {
	if !x.IsLike {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.IsLike)
	return offset
}

func (x *FavoriteReq) fastWriteField3(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.VideoId)
	return offset
}

func (x *FavoriteResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FavoriteResp) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Info)
	return offset
}

func (x *FavoriteListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *FavoriteListReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *FavoriteListReq) fastWriteField2(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.PageSize)
	return offset
}

func (x *FavoriteListReq) fastWriteField3(buf []byte) (offset int) {
	if x.PageNumber == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.PageNumber)
	return offset
}

func (x *FavoriteListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *FavoriteListResp) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Info)
	return offset
}

func (x *FavoriteListResp) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Count)
	return offset
}

func (x *FavoriteListResp) fastWriteField3(buf []byte) (offset int) {
	if len(x.Videos) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 3, len(x.Videos),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.Videos[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *GetVideoInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetVideoInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *GetVideoInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.VideoId)
	return offset
}

func (x *GetVideoInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *GetVideoInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Info)
	return offset
}

func (x *GetVideoInfoResp) fastWriteField2(buf []byte) (offset int) {
	if !x.IsFavorite {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.IsFavorite)
	return offset
}

func (x *GetVideoInfoResp) fastWriteField3(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.CommentCount)
	return offset
}

func (x *GetVideoInfoResp) fastWriteField4(buf []byte) (offset int) {
	if x.FavoriteCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.FavoriteCount)
	return offset
}

func (x *GetCountReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetCountReq) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Uid)
	return offset
}

func (x *GetCountReq) fastWriteField2(buf []byte) (offset int) {
	if x.Vid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Vid)
	return offset
}

func (x *BaseInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Msg)
	return offset
}

func (x *BaseInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.Code)
	return offset
}

func (x *Comment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Comment) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Id)
	return n
}

func (x *Comment) sizeField2() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Uid)
	return n
}

func (x *Comment) sizeField3() (n int) {
	if x.Vid == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.Vid)
	return n
}

func (x *Comment) sizeField4() (n int) {
	if x.Ctime == "" {
		return n
	}
	n += fastpb.SizeString(4, x.Ctime)
	return n
}

func (x *Comment) sizeField5() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(5, x.Content)
	return n
}

func (x *Comment) sizeField6() (n int) {
	if x.LikeCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.LikeCount)
	return n
}

func (x *Comment) sizeField7() (n int) {
	if !x.IsUploderLike {
		return n
	}
	n += fastpb.SizeBool(7, x.IsUploderLike)
	return n
}

func (x *ListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ListReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *ListReq) sizeField2() (n int) {
	if x.Vid == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Vid)
	return n
}

func (x *ListReq) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.Type))
	return n
}

func (x *ListReq) sizeField4() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.PageSize)
	return n
}

func (x *ListReq) sizeField5() (n int) {
	if x.PageNumber == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.PageNumber)
	return n
}

func (x *ListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListResp) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Info)
	return n
}

func (x *ListResp) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Count)
	return n
}

func (x *ListResp) sizeField3() (n int) {
	if x.Comments == nil {
		return n
	}
	for i := range x.Comments {
		n += fastpb.SizeMessage(3, x.Comments[i])
	}
	return n
}

func (x *PostReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PostReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *PostReq) sizeField2() (n int) {
	if x.Vid == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Vid)
	return n
}

func (x *PostReq) sizeField3() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(3, x.Content)
	return n
}

func (x *PostResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PostResp) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Info)
	return n
}

func (x *PostResp) sizeField2() (n int) {
	if x.Comment == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.Comment)
	return n
}

func (x *LikeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *LikeReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *LikeReq) sizeField2() (n int) {
	if !x.IsLike {
		return n
	}
	n += fastpb.SizeBool(2, x.IsLike)
	return n
}

func (x *LikeReq) sizeField3() (n int) {
	if x.CommentId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.CommentId)
	return n
}

func (x *LikeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LikeResp) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Info)
	return n
}

func (x *LikeResp) sizeField2() (n int) {
	if !x.IsLike {
		return n
	}
	n += fastpb.SizeBool(2, x.IsLike)
	return n
}

func (x *FavoriteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *FavoriteReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *FavoriteReq) sizeField2() (n int) {
	if !x.IsLike {
		return n
	}
	n += fastpb.SizeBool(2, x.IsLike)
	return n
}

func (x *FavoriteReq) sizeField3() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.VideoId)
	return n
}

func (x *FavoriteResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FavoriteResp) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Info)
	return n
}

func (x *FavoriteListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *FavoriteListReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *FavoriteListReq) sizeField2() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.PageSize)
	return n
}

func (x *FavoriteListReq) sizeField3() (n int) {
	if x.PageNumber == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.PageNumber)
	return n
}

func (x *FavoriteListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *FavoriteListResp) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Info)
	return n
}

func (x *FavoriteListResp) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Count)
	return n
}

func (x *FavoriteListResp) sizeField3() (n int) {
	if len(x.Videos) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(3, len(x.Videos),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.Videos[numIdxOrVal])
			return n
		})
	return n
}

func (x *GetVideoInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetVideoInfoReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *GetVideoInfoReq) sizeField2() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.VideoId)
	return n
}

func (x *GetVideoInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *GetVideoInfoResp) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Info)
	return n
}

func (x *GetVideoInfoResp) sizeField2() (n int) {
	if !x.IsFavorite {
		return n
	}
	n += fastpb.SizeBool(2, x.IsFavorite)
	return n
}

func (x *GetVideoInfoResp) sizeField3() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.CommentCount)
	return n
}

func (x *GetVideoInfoResp) sizeField4() (n int) {
	if x.FavoriteCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.FavoriteCount)
	return n
}

func (x *GetCountReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetCountReq) sizeField1() (n int) {
	if x.Uid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Uid)
	return n
}

func (x *GetCountReq) sizeField2() (n int) {
	if x.Vid == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Vid)
	return n
}

func (x *BaseInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseInfo) sizeField1() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Msg)
	return n
}

func (x *BaseInfo) sizeField2() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.Code)
	return n
}

var fieldIDToName_Comment = map[int32]string{
	1: "Id",
	2: "Uid",
	3: "Vid",
	4: "Ctime",
	5: "Content",
	6: "LikeCount",
	7: "IsUploderLike",
}

var fieldIDToName_ListReq = map[int32]string{
	1: "Uid",
	2: "Vid",
	3: "Type",
	4: "PageSize",
	5: "PageNumber",
}

var fieldIDToName_ListResp = map[int32]string{
	1: "Info",
	2: "Count",
	3: "Comments",
}

var fieldIDToName_PostReq = map[int32]string{
	1: "Uid",
	2: "Vid",
	3: "Content",
}

var fieldIDToName_PostResp = map[int32]string{
	1: "Info",
	2: "Comment",
}

var fieldIDToName_LikeReq = map[int32]string{
	1: "Uid",
	2: "IsLike",
	3: "CommentId",
}

var fieldIDToName_LikeResp = map[int32]string{
	1: "Info",
	2: "IsLike",
}

var fieldIDToName_FavoriteReq = map[int32]string{
	1: "Uid",
	2: "IsLike",
	3: "VideoId",
}

var fieldIDToName_FavoriteResp = map[int32]string{
	1: "Info",
}

var fieldIDToName_FavoriteListReq = map[int32]string{
	1: "Uid",
	2: "PageSize",
	3: "PageNumber",
}

var fieldIDToName_FavoriteListResp = map[int32]string{
	1: "Info",
	2: "Count",
	3: "Videos",
}

var fieldIDToName_GetVideoInfoReq = map[int32]string{
	1: "Uid",
	2: "VideoId",
}

var fieldIDToName_GetVideoInfoResp = map[int32]string{
	1: "Info",
	2: "IsFavorite",
	3: "CommentCount",
	4: "FavoriteCount",
}

var fieldIDToName_GetCountReq = map[int32]string{
	1: "Uid",
	2: "Vid",
}

var fieldIDToName_BaseInfo = map[int32]string{
	1: "Msg",
	2: "Code",
}
